local monitor = nil
if (peripheral.getType("right") == "monitor") then
    monitor = peripheral.wrap("right")
elseif (peripheral.getType("left") == "monitor") then
    monitor = peripheral.wrap("left")
end

term.clear()
term.setCursorPos(1,1)

if monitor then
    monitor.setTextScale(0.5)
end

print("Monitor: "..tostring(monitor))

print("")
print("running IS_ListTest")

 os.loadAPI("/InteractiveSorter_SourceCode/sorterAPI")
 --os.loadAPI("/InteractiveSorter_SourceCode/sorterAPI_30")

-- FOR NOW RUN IT ON MONITOR WITH COMMAND: "monitor left IS_ListTest"
-- Create API for itemDump => itemDB => getItemRefs(id) => table with info (Cobblestone, CBL,...)
-- Learn more about arrays/tables...
-- Consider this: local x, y = term.getCursorPos() => Try reading stack like this!

sorter = peripheral.wrap("top")
print("sorter: "..tostring(sorter))
 
 print("Integer |	Direction")
 print("0	      | Down")
 print("1	      | Up")
 print("2	      | North (-Z)")
 print("3	      | South (+Z)")
 print("4	      | West (-X)")
 print("5	      | East (+X)")
 term.write("Enter chest index: ")
 chestIndex = tonumber(read())

chest = sorter.list(chestIndex)
chestLen = table.getn(chest)

print("chest: "..tostring(chest).." len: "..tostring(chestLen))

 --******************************Stacks_01**********************************
 local stacks = {}
 for uuid,count in pairs(chest) do
    outA = "-UUID: "..uuid.." ID: "..sorterAPI.getID(uuid)
    print(outA)
    --monitor.write(outA)
    --x, y = term.getCursorPos()
    --monitor.setCursorPos(0,y)
     
    stack = sorterAPI.getStack(uuid)
    
    outB = " =>stID: "..tostring(stack.id).." amt: "..tostring(stack.amount).." mta: "..tostring(stack.meta)
    print(outB)
    --monitor.write(outB)
    --x, y = term.getCursorPos()
    --monitor.setCursorPos(0,y)
    --print("amt: "..tostring(stack.amount))
    --print("stack "..count.." amt: "..stack.amount.." id: "..stack.id.." meta: "..stack.meta)
    
    table.insert(stacks, sorterAPI.getID(uuid))
 end
 
 
 --******************************Stacks_02**********************************
  --[[ 
 stacks2 = sorterAPI.getStacks("right","left")
 print(tostring(stacks2[1]))
 --print("stacks2: "..tostring(stacks2).." len: "..table.getn(stacks2))
 --]]

 --[[ 
 local stacksLen = table.getn(stacks)
 print(stacksLen)
 
 for 1, stacksLen do
    print("ID: "..stacks[i])
 end
 --]]
 
 --******************************Stacks_03**********************************
 -- outs amounts aswell! way to go..
 --http://www.computercraft.info/forums2/index.php?/topic/8397-apimiscperipherals-interactive-sorter-idmeta-reader-api/

print("Stacks3")

local stacks3 = {}
for item,count in pairs(sorter.list(chestIndex)) do
  itemId = bit.band(item, 0x7fff)
  damageValue = bit.brshift(item, 15)
  local stack = {}
  stack.amount = tonumber(count)
  stack.id = tonumber(itemId)
  stack.meta = tonumber(damageValue)
  stack.uuid = tonumber(item)
  
  outTxt = "-id: "..(stack.id).." amt: "..(stack.amount).." mta: "..(stack.meta).." uuid: "..(stack.uuid)
  print(outTxt)
  --monitor.write(outTxt)
  --local x, y = term.getCursorPos()
  --monitor.setCursorPos(0,y+1)
  table.insert(stacks3, stack)
end
 
 