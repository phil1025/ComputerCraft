-- APP STORE

-- Variables

	version = "1.0.0"
	
	local running = true
	local workDir = ""
	
	local gui = nil
	local gitAPI = nil

-- Functions

	local function splitString(name, sep)
		local elements = {}
		local index = 1
		for e in string.gmatch(name, "[^%"..sep.."]+") do
			elements[index] = e
			index = index + 1
		end
		return elements
	end
	
	local loadGUI = function()
		local guiDir = workDir.."_guis/"
		--> should check term.isColor() => corresponding GUI
		os.loadAPI(guiDir.."gui_norm")
		gui = gui_norm
		gui.init(version)
	end
	
	local loadGitAPI = function()
		local apiPath = ""
		local elements = splitString(workDir, "/")
		for i = 1, (#elements - 2) do
			apiPath = apiPath..elements[i].."/"
		end
		apiPath = apiPath.."APIs/"
		local gitFilePath = apiPath.."git.api"
		print("gitFilePath: "..gitFilePath)
		os.loadAPI(gitFilePath)
		gitAPI = _G["git.api"]
		print("gitAPI: "..tostring(gitAPI))
	end
		
	function eventHandle(action)
		print("EVENT HANDLE action: "..tostring(action))
		if action == "Exit" then
			exit()
		elseif action == "Repo" then
			return downloadGit(nil)
		elseif action == "Programs" then
			return downloadGit("Programs")
		elseif action == "APIs" then
			return downloadGit("APIs")
		elseif action == "Data" then
			-- ...
		else
			print(" Err: Appstore.eventHandle() => Unknown action: "..tostring(action))
		end
	end
	
	function exit()
		running = false
		print("Exiting program...")
		sleep(1)
	end
	
	function downloadGit(key)
		term.clear()
		term.setCursorPos(1,1)
		-- line 1 taskBar
		-- line 2 page indicator, separation
		-- line 3-18/19 content
		
		local items = {}
		print("DownloadGIT key: |"..tostring(key).."|")
		
		local url = ""
		if key ~= nil then
			--url = "SourceCode/emu_computers/0/C/"..key
			url = "SourceCode/releases/"..key.."/"
		end
		
		print("git url: "..url)
				
		local data = gitAPI.fetch(url)
		local itemsPerPage = 10
		
		print("DOWNLOAD GIT key: "..tostring(key).." treeLEN: "..(#data.tree))
		
		local itemIndex = 1
		
		for i = 1, #data.tree do
			print("item "..i..": "..tostring(data.tree[i].path))
			local item = data.tree[i]
			local elements = splitString(item.path, "/")
			local fileName = elements[#elements]
			if key == nil then
				items[itemIndex] = item
				itemIndex = itemIndex + 1
			else
				local _el = splitString(fileName, ".")
				if #_el > 1 then
					if _el[2] == "inst" then
						item.fileName = fileName
						item.productName = _el[1]
						items[itemIndex] = item
						itemIndex = itemIndex + 1
					end
				end
			end
		end
				
		print("DOWNLOAD END itemsCount: "..tostring(#items))
		print("")
		sleep(1)
		
		return items
	end

	local colorRuntime = function()		
		while running do
			-- NOTE: mouse_click event might also only work with Advanced Computers!
			--		 doesnÂ´t need only different GUIs, but also runtime!
			event, button, x, y = os.pullEvent("mouse_click")
			if event =="mouse_click" then
				
				--gui.onClickEvent(event, button, x, y)
			end
		end
	end

	local normalRuntime = function()
		while running do
			event, button, x, y = os.pullEvent()
			if tostring(event) == "key" then -- or tostring(event) == "char" then
				gui.onClickEvent(event, button, x, y, eventHandle)
				--print("event: "..tostring(event).." button: "..tostring(button).." xy: "..tostring(x)..", "..tostring(y))
			end
		end
	end

	local init = function()
		print("isColor: "..tostring(term.isColor()))
		
		workDir = ""
		local progPath = shell.getRunningProgram()
		local elements = splitString(progPath, "/")
		for i = 1, (#elements - 1) do
			workDir = workDir..elements[i].."/"
		end
		
		loadGUI()
		loadGitAPI()
		if term.isColor() then
			colorRuntime()
		else
			normalRuntime()
		end
	end

-- Main

	init()