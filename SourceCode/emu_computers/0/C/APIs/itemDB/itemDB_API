local baseDir = "C/Resources/Databases/"

-- Maybe better as single file.. creates 2000+ files on server...
-- Still test access speeds for both...

local function scaffold(directory, name)
    print("SCAFFOLD DB => "..name.." at dir: "..directory)
    
    --os.loadAPI("C/MyPrograms/APIs/itemTable/itemTableAPI")
    local itemTable = apiManager.load("itemTableAPI")
    
    sleep(1)
    
    fs.makeDir(directory)
    if not fs.exists(directory) then
        return false
    end
    
    local itemsDir = directory.."/Items"
    fs.makeDir(itemsDir)
    if not fs.exists(itemsDir) then
        return false
    end

    local items = itemTable.getItemsDump()
    local status = 0.0
    local maxStatChars = 16.0
    local statusBar = ""
    local statusCount = 0.0
    for i = 1, #items do
        
        local item = items[i]
        term.clear()
        term.setCursorPos(1,1)

        status = i / #items
        local statCh = status * maxStatChars
       
        
        local diff = math.floor(statCh) - math.floor(statusCount)
        --print("-> st: "..status.." stCh: "..statCh.."stCnt: "..statusCount.." diff: "..diff)

        if math.floor(statCh) > math.floor(statusCount) then
            for i = 1, diff do
                statusBar = statusBar.."#"
            end
            statusCount = statCh
        end
                
        print("Scaffolding database "..name.."...")
        print("# Status "..statusBar.." ["..math.floor(status * 100).."]")
        print(i.." id: "..item.id.." mta: "..item.meta.." nme: "..item.name)
        print(" - freeSpace on C: "..fs.getFreeSpace("C/"))
        
        local filePath = itemsDir.."/"..tostring(item.uuid)..".itm"
        local file = fs.open(filePath, "w")
        file.writeLine("uuid "..tostring(item.uuid))
        file.writeLine("id "..tostring(item.id))
        file.writeLine("meta "..tostring(item.meta))
        file.writeLine("name "..tostring(item.name))
        file.writeLine("amount 0")
        file.close() -- NEVER FORGET TO CLOSE A FILE!
        
        if not fs.exists(filePath) then
            return false
        end
        sleep(0.01)
    end
    return true
end

-- Create new database (returns true if succeeded, if db already exists returns false)
function create(name)
    local n = name
    if n == "" or n == nil then
        print("itemDB_API.create => Invalid name: "..name)
        return false
    end
    local path = baseDir..name
    if not fs.exists(path) then
        local success = scaffold(path, name)
        if not success then
            if fs.exists(path) then
                fs.delete(path)
            end
        end
        return success
    else
        return false
    end
end

