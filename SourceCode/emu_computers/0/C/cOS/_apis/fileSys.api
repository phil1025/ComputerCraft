-- FileSys API
--.readAllLines 
--.getDirectories
--.getFiles
--.getDirectoriesAll
--.getFilesAll
--.find (dir/file of name)

-- Variables  **********************************

	name = "fileSys"

-- Functions ***********************************

function getFreeDiskSpace(path)
    return fs.getFreeSpace(path)
end

function readAllLines(path)
	-- http://www.computercraft.info/forums2/index.php?/topic/25583-fsreadline/
	local lines = {}
	local h = fs.open(path, "r")
	for line in h.readLine do 
		lines[#lines + 1] = line 
	end
	h.close()
	return lines
end

function getDirectories(path)
	-- https://luapower.com/fs#fs.dirdir-dot_dirs---d-next
	local dirs = {}
	local list = fs.list(path)
	local index = 1
	for i = 1, #list do
	    local p = path.."/"..list[i]
    	if fs.isDir(p) then
    	    --print(" - isDir: "..tostring(p))
    	    dirs[index] = p
    	    index = index + 1
    	end
	end
	return dirs
end

function getFiles(path) 
    -- https://luapower.com/fs#fs.dirdir-dot_dirs---d-next
    local files = {}
	local list = fs.list(path)
	local index = 1
	for i = 1, #list do
        local p = path.."/"..tostring(list[i])
    	if not fs.isDir(p) then
    	    --print(" - isFile: "..tostring(p))
    	    files[index] = p
    	    index = index + 1
    	end
	end
	return files
end

-- Returns all directories including subdirectories for a path
function getDirectoriesAll(path)
    local dirs = {}
    local cache = { path }
    local index = 1
    while table.getn(cache) > 0 do
        local p = cache[1]
        table.remove(cache, 1)
        if not string.find(p, "/Databases/") then --> Database must be searched via databaseAPI...
            local subs = getDirectories(p) 
            --print(" cache len: "..tostring(table.getn(cache)).." dir: "..tostring(p).." subs: "..tostring(table.getn(subs)))
            for i = 1, #subs do
                cache[#cache + 1] = tostring(subs[i])
            end
            dirs[index] = p
            index = index + 1   
        end
    end
    return dirs
end

function getFilesAll(path)
    local files = {}
    local dirs = getDirectoriesAll(path)
    local index = 1
    for i = 1, #dirs do
        local p = dirs[i]
        --print("dir "..i..": "..p)
        local subs = getFiles(p)
        for i = 1, #subs do
            files[index] = subs[i]
            --print(" - file "..index..": "..files[index])
            index = index + 1
        end
    end
    dirs = nil
    return files
end

-- Returns a table of paths for matching file names
function findFiles(path, keyword)
    --os.loadAPI("C/MyPrograms/APIs/stringUtilsAPI") 
    local stringUtils = apiManager.load("stringUtilsAPI")
    
    local matches = {}
    local allFiles = getFilesAll(path)
    local index = 1
    for i = 1, #allFiles do
        local elements = stringUtils.split(allFiles[i], "/")
        local fileName = elements[#elements]
        if stringUtils.contains(fileName, keyword) then
            matches[index] = allFiles[i]
            index = index + 1
        end
    end
    files = nil
    return matches
end