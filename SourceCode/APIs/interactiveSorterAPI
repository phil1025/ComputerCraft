--==MiscPeripherals UUID Reader==
--found at: http://www.computercraft.info/forums2/index.php?/topic/8397-apimiscperipherals-interactive-sorter-idmeta-reader-api/
--source: https://pastebin.com/dUh038df
-- <v3.0 (ComputerCraft???)
--NOTE: unclear if NeverCast updated the code.. 
--      many comments point out bugs. 
--      Fix if needed!
--*********************************************

--[[ Code by NeverCast
     This should be loaded like a typical api
     Feel free to name it what you like
--]]

local directions = { [0]=0,[1]=1,[2]=2,[3]=3,[4]=4,[5]=5,["down"] = 0, ["up"] = 1, ["-Z"] = 2, ["+Z"] = 3, ["-X"] = 4, ["+X"] = 5, ["+Y"] = 1, ["-Y"] = 0}
directions.south = directions["+Z"]
directions.east = directions["+X"]
directions.north = directions["-Z"]
directions.west = directions["-X"]

--[[
-- sorterAPI VERSION => DOES NOT WORK!
-- Gets the Unique ID based on the ID and Meta
function getUUID(id, meta)
  if meta == nil then
    meta = 27268
  else
    meta = bit.bxor(meta, 0x6E6C)
  end
  local uuid = bit.bxor(id, 0x4F89) * 0x8000 + bit.bxor(meta, 0x3A69)
  return uuid
end
--]]

-- sorterAPI_30 VERSION => Seems to work!
function getUUID(id, meta)
  uuid = id + meta * 32768
  return uuid
end
 
-- Get a stack table from a single uuid and amount
-- This does all the math to reverse the unique ID algorithm that RG wrote.
-- Valid for version 2.3
function getStack(uuid, c)
        -- Reverse RG's fancy math
        local subt = bit.band(uuid, 0x7fff)
        local dexorm = bit.bxor(subt, 0x3a69)
        local metadata = nil
        if dexorm ~= 28262 then -- item takes dmg
                metadata = bit.bxor(dexorm, 0x6e6c)
        end
        local id = bit.bxor((uuid-subt)/0x8000, 0x4f89)
        -- put it in to a nice table
        local stack = {}
        stack.amount = c
        stack.id = id
        stack.meta = metadata
        return stack
end
 
--[[ --> Didnt Work!
-- Get stacks from an Interactive Sorter
-- direction   : the direction of the Interactive Sorter Peripheral
-- invDirection: the direction of the inventory from the peripheral
-- valid options for invDirection are 0,1,2,3,4,5 ( original values),
-- north, south, east, west, up, down, and the +/-X,Y,Z strings.
-- (see directions variable)
function getStacks(direction, invDirection)
        if not peripheral.isPresent(direction) then
                return false, "No Peripheral"
        end
        if peripheral.getType(direction) ~= "interactiveSorter" then
                return false, "Not a sorter"
        end
        local stacks = {}
        for uuid,count in pairs(peripheral.call(direction, "list", directions[invDirection])) do
                table.insert(stacks, getStack(uuid, count))
        end
        return true, stacks    
end
--]]

--***************************************************************************************************
-- https://ftbwiki.org/Interactive_Sorter =>
-- ABOUT UUIDs
-- UUIDs are integers used to express a block or item's ID and metadata as one value. 
-- As of v3.0, UUIDs are expressed as the item ID + (meta * 32768).
-- UUIDs are returned by the Interactive Sorter's internal functions.
-- UUIDs changed from v2.3 to v3.0. 
-- This page will show how to use UUIDs of both types.
-- Example: Interactive Sorter's ID is 1229:5 so its UUID would be 
--          1229 + (5 * 32768) = 165069
--   uuid = id   + (meta * 32768)
--   uuid - (meta * 32768)  = id
--***************************************************************************************************
-- MY FUNCTIONS
--***************************************************************************************************

--[[
-- reversed of sorterAPI_30 VERSION function getUUID() => UNTESTED
function getID(uuid, meta)
  --id = uuid - 32768 / meta
  id = uuid - 32768 * meta
  return id
end
--]]

-- # getStacks() => WORKS
-- Get stacks from an Interactive Sorter
-- Example:
-- sorter = peripheral.wrap("top")
-- chest = sorter.list(chestIndex) 
-- sorterAPI.getStacks(
function getStacks(chest)
	local stacks = {}
	
	--os.loadAPI("C/MyPrograms/APIs/itemTable/itemTableAPI") 
	local itemTable = apiManager.load("itemTableAPI")
	
	index = 1
	for item,count in pairs(chest) do
		local itemId = bit.band(item, 0x7fff)
		local damageValue = bit.brshift(item, 15)
		local stack = {}
		stack.amount = tonumber(count)
		stack.id = tonumber(itemId)
		stack.meta = tonumber(damageValue)
		stack.uuid = tonumber(item)
		local item = itemTable.getItemFromID(stack.id, stack.meta)
		if item == nil then
		    item = itemTable.getItemFromID(stack.id, 0)
		end
        if item ~= nil then
            stack.name = item.name
        end
        		
	    --local outTxt = "-id: "..(stack.id).." amt: "..(stack.amount).." mta: "..(stack.meta).." uuid: "..(stack.uuid).." name: "..tostring(stack.name)
        --print(outTxt)
        
		table.insert(stacks, stack)
	end
	return stacks
end

-- # getStackAtIndex()
--   http://www.computercraft.info/forums2/index.php?/topic/10091-lua-interactive-sorting-system/
function getStackAtIndex(chest, index)
	local stacks = getStacks(chest)
	return stacks[index]
end
