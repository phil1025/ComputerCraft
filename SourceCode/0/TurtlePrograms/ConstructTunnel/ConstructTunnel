term.clear()
term.setCursorPos(1,1)

print("  ***********************************")
print("  ******* ConstructTunnel 1.0 *******")
print("  ***********************************")

-- slot 1       = fuel
-- slot 2-12    = mined items
-- slot 13      = building material bottom
-- slot 14      = building material top
-- slot 15      = building material left
-- slot 16      = building material right

--boolean result	turtle.compare()	Detects if the block in front is the same as the one in the currently selected slot	1.31
--boolean result	turtle.compareUp()	Detects if the block above is the same as the one in the currently selected slot	?
--boolean result	turtle.compareDown()	Detects if the block below is the same as the one in the currently selected slot	?
--boolean result	turtle.compareTo(number slot)	Compare the current selected slot and the given slot to see if the items are the same. Returns true if they are the same, false if not.	1.4
--boolean success	turtle.drop([number count])

print("")

local tArgs = {...}
if tArgs[1] == "help" then
    print("Info:")
    print("- Inventory reservations:")
    print("  slot 1    = fuel")
    print("  slot 2-12 = mined items")
    print("  slot 13   = building material bottom")
    print("  slot 14   = building material top")
    print("  slot 15   = building material left")
    print("  slot 16   = building material right")
    return
else
    print("Start program with argument |help| for more info => ContructTunnel help")
    print("")
end

-- Returns true if succeeded, else false
local function resolveFuel(threshold, index)
    if turtle.getFuelLevel() < threshold then
        if turtle.getItemCount(index) > 0 then
            --local selIndex = turtle.getSelectedSlot() => 1.6
            turtle.select(index)
            local usedItems = 0
            while turtle.getFuelLevel() < threshold and turtle.getItemCount(index) do
                turtle.refuel(1)
                usedItems = usedItems + 1
            end
            --turtle.setSelectedSlot(selIndex)
            print("Refueled from slot: "..tostring(index).." using "..tostring(usedItems).." items => fuelLevel: "..tostring(turtle.getFuelLevel()))
        end
    end
    return turtle.getFuelLevel() >= threshold
end

-- TO Turtle API => unlocalize!
local function compareDirectionWithSlot(direction, slotIndex) -- <direction> => "fwd", "up", "dwn" / no or wrong direction = forward
    local match = false
    if direction == "up" then
        match = turtle.compareUp(i)
    elseif direction == "dwn" then
        match = turtle.compareDown(i)
    elseif direction == "fwd" then
        match = turtle.compare(i)
    else
        print("Unknown direction in funct ConstructTunnel.compareDirectionWithSlot => "..direction)
        print("Use direction string: fwd, up or down") 
    end
    return match
end

-- TO Turtle API => unlocalize!
-- Compares each slot with the type of block in direction n and returns a list with matching slot indexes
local function getSlotsForBlockType(direction) -- <direction> => "fwd", "up", "dwn" / no or wrong direction = forward
    local matchingSlots = {}
    local index = 1
    for i = 1, 16 do
        local match = compareDirectionWithSlot(direction, i)
        if match then
            matchingSlots[index] = i
            index = index + 1
        end
    end
    return matchingSlots
end

-- TO Turtle API => unlocalize!
local function getBestSlot(direction) -- <direction> => "fwd", "up", "dwn" / no or wrong direction = forward
    local slotIndex = -1
    --[[ DOESNT WORK: turtle.getSelectedSlot() => 1.6
    local selectedSlot = turtle.getSelectedSlot() => 1.6
    if compareDirectionWithSlot(direction, selectedSlot) then
        if 	turtle.getItemSpace(selectedSlot) > 0 then
            slotIndex = selectedSlot
        end
    end
    --]]
    if slotIndex == -1 then -- obsolete without upper part!
        local matchingSlots = getSlotsForBlockType(direction)
        for i = 1, #matchingSlots do
            local index = matchingSlots[i]
            if turtle.getItemSpace(index) > 0 then
                slotIndex = i
                break
            end
        end
    end
    if slotIndex == -1 then
        for i = 1, 16 do
            if turtle.getItemCount(i) == 0 then
                slotIndex = i
                break
            end
        end
    end
    return slotIndex
end

local function build(side) -- <side> => "left", "right", "top", "bottom"
    local slotIndex = -1
    local success = false
    if side == "left" then
        slotIndex = 15
        if turtle.getItemCount(slotIndex) > 0 then
            turtle.select(slotIndex)
            success = turtle.place()
        else
            print("Unable to build "..side.." => slot "..tostring(slotIndex).." is empty!")
        end
    elseif side == "right" then
        slotIndex = 16
        if turtle.getItemCount(slotIndex) > 0 then
            turtle.select(slotIndex)
            success = turtle.place()
        else
            print("Unable to build "..side.." => slot "..tostring(slotIndex).." is empty!")
        end
    elseif side == "top" then
        slotIndex = 14
        if turtle.getItemCount(slotIndex) > 0 then
            turtle.select(slotIndex)
            success = turtle.placeUp()
        else
            print("Unable to build "..side.." => slot "..tostring(slotIndex).." is empty!")
        end
    elseif side == "bottom" then
        slotIndex = 13
        if turtle.getItemCount(slotIndex) > 0 then
            turtle.select(slotIndex)
            success = turtle.placeDown()
        else
            print("Unable to build "..side.." => slot "..tostring(slotIndex).." is empty!")
        end
    end
    return success
end

-- Digs one tunnel segment  
local function digLayer(height, autoFix, useDefault)

    -- IMPLEMENT BUILDING!
    local success = false

    local slotIndex = getBestSlot("fwd")
    if slotIndex == -1 then
        print("No free slot found!")
        return false
    end
    
    turtle.select(slotIndex)

    if turtle.detect() then
        turtle.dig()
    end
    turtle.forward()
    
    -- build bottom center => slot 13
    if autoFix and not turtle.detectDown() then
        build("bottom")
    end
    
    turtle.turnLeft()
    
    if turtle.detect() then
        turtle.dig()
    end
    turtle.forward()
    
    -- build bottom left => slot 13
    if autoFix and not turtle.detectDown() then
        build("bottom")
    end
    
    for i = 1, (height - 1) do -- dig up / build left wall
        -- build left wall => slot 15
        if autoFix and not turtle.detect() then
            build("left")
        end
        
        if turtle.detectUp() then
            turtle.digUp()
        end
        turtle.up()
    end
    
    -- build last left wall => slot 15
    if autoFix and not turtle.detect() then
        build("left")
    end
    turtle.turnRight()
    
    -- build top left = slot 14
    if autoFix and not turtle.detectUp() then
        build("top")
    end
    turtle.turnRight()
    
    
    if turtle.detect() then
        turtle.dig()
    end
    turtle.forward()
    
    -- build top center = slot 14
    if autoFix and not turtle.detectUp() then
        build("top")
    end
    
    if height <= 3 then
        if turtle.detectDown() then
            turtle.digDown()
        end
    else
        for i = 1, (height - 1) do -- center down
            turtle.digDown()
            turtle.down()
        end
        for i = 1, (height - 1) do -- center up
            turtle.up()
        end
    end
    
    if turtle.detect() then
        turtle.dig()
    end
    turtle.forward()
    
    -- build top center = slot 14
    if autoFix and not turtle.detectUp() then
        build("top")
    end

    for i = 1, (height - 1) do -- dig down / build right wall
     
        -- build right wall => slot 16
        if autoFix and not turtle.detect() then
            build("right")
        end
        
        if turtle.detectDown() then
            turtle.digDown()
        end
        turtle.down()
    end
    
    -- build last right wall => slot 16
    if autoFix and not turtle.detect() then
        build("right")
    end

    turtle.turnLeft()
    
    -- build bottom right => slot 16
    if autoFix and not turtle.detectDown() then
        build("bottom")
    end
    
    turtle.turnLeft()
    turtle.forward()
    turtle.turnRight()
    return true
end

local function main(distance, height, autoFix, useDefault)
    local hasFuel = resolveFuel(50, 1)
    -- turtles will just stop anyway if they run out of fuel...
    print(" dist: "..tostring(distance))
    for i = 1, distance do
        local successful = digLayer(height, autoFix, useDefault)
        if not successful then
            break
        end
    end
end

--print("")
term.write("Enter distance: ")
local distance = tonumber(read())
--print("")

term.write("Enter height: ")
local height = tonumber(read())
--print("")

term.write("Allow autoFix (y/n): ")
local allowAutoFix = tostring(read()) == "y"
--print("")

term.write("Allow to use cobblestone/dirt if no resources found (y/n): ")
local useDefaults = tostring(read()) == "y"
print("")

print("Started digging...")
main(distance, height, allowAutoFix, useDefaults)
print("")
print("Program end")